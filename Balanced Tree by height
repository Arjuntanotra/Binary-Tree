
class Solution{
    int height(Node *soot){
        if(soot == NULL){
            return 0;
        }
        
        int left = height(soot->left);
        int right = height(soot->right);
        
        int ans = max(left, right) +1;
        
        return ans ;
        
        
    }
    public:
    //Function to check whether a binary tree is balanced or not.
    
    pair<bool , int > again_isBalanced(Node *root){
        if(root == NULL){
            pair<bool , int >p(true, 0);
            return p;
        }
        pair<bool , int >left = again_isBalanced(root->left);
        pair<bool , int >right = again_isBalanced(root->right);
        
        bool one = left.first;
        bool two = right.first;
        bool three = abs(left.second - right.second) <=1;
        
        pair<bool , int >ans ;
        
        if(one&& two && three ){
            ans.first = true;
        }
        else{
            ans.first = false;
        }
        
        ans.second = max(left.second, right.second) +1;
        
        return ans ;
        
    }

    bool isBalanced(Node *root)
    {
        //  Your Code here
       return again_isBalanced(root).first;
    }
};
